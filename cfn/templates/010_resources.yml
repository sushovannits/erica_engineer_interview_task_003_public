AWSTemplateFormatVersion: "2010-09-09"
Description: ERICA engineer interview task
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "192.168.0.0/24"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"

  VpcDhcpOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainNameServers:
        - AmazonProvidedDNS

  VpcDHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: !Ref VpcDhcpOptions
      VpcId: !Ref Vpc

  SubnetPublic:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "ap-southeast-2a"
      CidrBlock: 192.168.0.0/26
      VpcId: !Ref Vpc

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Vpc

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref SubnetPublic
 
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable

  # ec2
  
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeVolumes'
                  - 'ec2:CreateVolume'
                Resource: '*'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: 
        - !Ref InstanceRole

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Demo Security Group
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  Instance:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t3.micro"
      ImageId: ami-00671cd019674e67c
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: unsw-test
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvdm"
          Ebs: 
            VolumeType: "gp2"
            VolumeSize: "5"
            Encrypted: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          SubnetId: !Ref SubnetPublic
          DeviceIndex: 0
          GroupSet:
          - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
         #!/bin/bash
         /usr/local/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=Instance
          export HOST_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
          export MACHINE_NAME=$(tr '.' '-' <<<$HOST_IP)
          export AWS_INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          export AWS_AVAIL_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)
          export AWS_REGION="`echo \"$AWS_AVAIL_ZONE\" | sed 's/[a-z]$//'`"
          echo "export AWS_DEFAULT_REGION=${!AWS_REGION}" >> /etc/bashrc

          yum update
          yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          yum -y install epel-release
          yum install -y nginx
          
          systemctl enable nginx
          systemctl start nginx
          
          DATA_STATE="unknown"
          until [ "${!DATA_STATE}" == "attached" ]; do
            DATA_STATE=$(aws ec2 describe-volumes \
              --region ${AWS::Region} \
              --filters \
                  Name=attachment.instance-id,Values=${!AWS_INSTANCE_ID} \
                  Name=attachment.device,Values=/dev/xvdm \
              --query Volumes[].Attachments[].State \
              --output text)
            sleep 5
          done
          # Format /dev/xvdm if it does not contain a partition yet
          if [ "$(blkid /dev/xvdm | grep -o ext4)" != "ext4" ]; then
              mkfs -t ext4 /dev/xvdm
          fi
          mkdir -p /data
          # Persist the volumes in /etc/fstab so it gets mounted again
          echo '/dev/xvdm /data ext4 defaults,nofail 0 2' >> /etc/fstab
          # Mount all volumes
          mount -a
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource=Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

Outputs:
  PublicWebsiteAddress:
    Description: Public Website Address
    Value: !Join [ "", [ "http://", !GetAtt Instance.PublicDnsName ] ]
